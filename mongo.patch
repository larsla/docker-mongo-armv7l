diff --git a/SConstruct b/SConstruct
index 7e0a82b..f84958e 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1823,8 +1823,8 @@ def doConfigure(myenv):
         conf.Finish()

     if not myenv.ToolchainIs('msvc'):
-        if not AddToCXXFLAGSIfSupported(myenv, '-std=c++11'):
-            myenv.ConfError('Compiler does not honor -std=c++11')
+        if not AddToCXXFLAGSIfSupported(myenv, '-std=gnu++11'):
+            myenv.ConfError('Compiler does not honor -std=gnu++11')
         if not AddToCFLAGSIfSupported(myenv, '-std=c99'):
             myenv.ConfError("C++11 mode selected for C++ files, but can't enable C99 for C files")
 
diff --git a/SConstruct b/SConstruct
index 64c8387..8df6510 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1860,6 +1860,9 @@ def doConfigure(myenv):
     if conf.CheckFunc('strnlen'):
         conf.env.SetConfigHeaderDefine("MONGO_CONFIG_HAVE_STRNLEN")

+    if conf.CheckFunc('mallinfo'):
+        conf.env.SetConfigHeaderDefine("MONGO_CONFIG_HAVE_MALLINFO")
+
     conf.Finish()

     # If we are using libstdc++, check to see if we are using a libstdc++ that is older than
diff --git a/src/mongo/util/processinfo_linux.cpp b/src/mongo/util/processinfo_linux.cpp
index 8addc44..c420b11 100644
--- a/src/mongo/util/processinfo_linux.cpp
+++ b/src/mongo/util/processinfo_linux.cpp
@@ -37,8 +37,10 @@
 #include <sys/utsname.h>
 #ifdef __UCLIBC__
 #include <features.h>
-#else
+#elif defined(__GLIBC__)
 #include <gnu/libc-version.h>
+#else
+#define gnu_get_libc_version(x) "Unknow"
 #endif

 #include "processinfo.h"
@@ -339,6 +341,7 @@ class LinuxSysHelper {
         paths.push_back("/etc/debian_release");
         paths.push_back("/etc/slackware-version");
         paths.push_back("/etc/centos-release");
+        paths.push_back("/etc/alpine-release");
         paths.push_back("/etc/os-release");

         for (i = paths.begin(); i != paths.end(); ++i) {
@@ -425,10 +428,12 @@ double ProcessInfo::getSystemMemoryPressurePercentage() {

 void ProcessInfo::getExtraInfo(BSONObjBuilder& info) {
     // [dm] i don't think mallinfo works. (64 bit.)  ??
-    struct mallinfo malloc_info =
-        mallinfo();  // structure has same name as function that returns it. (see malloc.h)
-    info.append("heap_usage_bytes",
-                malloc_info.uordblks /*main arena*/ + malloc_info.hblkhd /*mmap blocks*/);
+    #ifdef MONGO_CONFIG_HAVE_MALLINFO
+        struct mallinfo malloc_info =
+            mallinfo();  // structure has same name as function that returns it. (see malloc.h)
+        info.append("heap_usage_bytes",
+                    malloc_info.uordblks /*main arena*/ + malloc_info.hblkhd /*mmap blocks*/);
+    #endif
     // docs claim hblkhd is included in uordblks but it isn't

     LinuxProc p(_pid);
diff --git a/src/mongo/util/stacktrace_posix.cpp b/src/mongo/util/stacktrace_posix.cpp
index 230621a..8c5ca89 100644
--- a/src/mongo/util/stacktrace_posix.cpp
+++ b/src/mongo/util/stacktrace_posix.cpp
@@ -50,6 +50,10 @@
 #include <ucontext.h>
 #endif

+#ifndef __ELF_NATIVE_CLASS
+#define __ELF_NATIVE_CLASS 64
+#endif
+
 namespace mongo {

 namespace {
diff --git a/src/third_party/asio-asio-1-11-0/asio/include/asio/impl/error_code.ipp b/src/third_party/asio-asio-1-11-0/asio/include/asio/impl/error_code.ipp
index 4e7badb..961acb8 100644
--- a/src/third_party/asio-asio-1-11-0/asio/include/asio/impl/error_code.ipp
+++ b/src/third_party/asio-asio-1-11-0/asio/include/asio/impl/error_code.ipp
@@ -97,17 +97,14 @@ public:
 #if defined(__sun) || defined(__QNX__) || defined(__SYMBIAN32__)
     using namespace std;
     return strerror(value);
-#elif defined(__MACH__) && defined(__APPLE__) \
-  || defined(__NetBSD__) || defined(__FreeBSD__) || defined(__OpenBSD__) \
-  || defined(_AIX) || defined(__hpux) || defined(__osf__) \
-  || defined(__ANDROID__)
-    char buf[256] = "";
-    using namespace std;
-    strerror_r(value, buf, sizeof(buf));
-    return buf;
-#else
-    char buf[256] = "";
+#elif defined(__GLIBC__) && defined(_GNU_SOURCE) // https://github.com/chriskohlhoff/asio/pull/95
+      char buf[256] = "";
     return strerror_r(value, buf, sizeof(buf));
+#else
+      char buf[256] = "";
+      using namespace std;
+      strerror_r(value, buf, sizeof(buf));
+      return buf;
 #endif
 #endif // defined(ASIO_WINDOWS)
   }
diff --git a/src/third_party/gperftools-2.2/src/base/linux_syscall_support.h b/src/third_party/gperftools-2.2/src/base/linux_syscall_support.h
index 9b6c35d..2f7503f 100644
--- a/src/third_party/gperftools-2.2/src/base/linux_syscall_support.h
+++ b/src/third_party/gperftools-2.2/src/base/linux_syscall_support.h
@@ -2165,9 +2165,9 @@ struct kernel_stat {
                          int,                     t, int,       p)
   #endif
   #if defined(__x86_64__)
-    /* Need to make sure __off64_t isn't truncated to 32-bits under x32.  */
+    /* Need to make sure off64_t isn't truncated to 32-bits under x32.  */
     LSS_INLINE void* LSS_NAME(mmap)(void *s, size_t l, int p, int f, int d,
-                                    __off64_t o) {
+                                    off64_t o) {
       LSS_BODY(6, void*, mmap, LSS_SYSCALL_ARG(s), LSS_SYSCALL_ARG(l),
                                LSS_SYSCALL_ARG(p), LSS_SYSCALL_ARG(f),
                                LSS_SYSCALL_ARG(d), (uint64_t)(o));
@@ -2204,7 +2204,7 @@ struct kernel_stat {
     LSS_INLINE _syscall6(void*, mmap,              void*, s,
                          size_t,                   l, int,               p,
                          int,                      f, int,               d,
-                         __off64_t,                o)
+                         off64_t,                o)
     LSS_INLINE int LSS_NAME(sigaction)(int signum,
                                        const struct kernel_sigaction *act,
                                        struct kernel_sigaction *oldact) {
diff --git a/src/third_party/gperftools-2.2/src/config-10gen-linux.h b/src/third_party/gperftools-2.2/src/config-10gen-linux.h
index 6c3f28b..faa9f51 100644
--- a/src/third_party/gperftools-2.2/src/config-10gen-linux.h
+++ b/src/third_party/gperftools-2.2/src/config-10gen-linux.h
@@ -143,7 +143,9 @@
 #define HAVE_STRING_H 1

 /* Define to 1 if the system has the type `struct mallinfo'. */
+#if defined(HAVE_MALLINFO)
 #define HAVE_STRUCT_MALLINFO 1
+#endif

 /* Define to 1 if you have the <sys/cdefs.h> header file. */
 #define HAVE_SYS_CDEFS_H 1
@@ -197,7 +199,7 @@
 #define HAVE___ATTRIBUTE__ 1

 /* Define to 1 if compiler supports __environ */
-#define HAVE___ENVIRON 1
+/* undef HAVE___ENVIRON */

 /* Define to 1 if the system has the type `__int64'. */
 /* #undef HAVE___INT64 */
diff --git a/src/third_party/gperftools-2.2/src/malloc_hook_mmap_linux.h b/src/third_party/gperftools-2.2/src/malloc_hook_mmap_linux.h
index 8e5a3b0..140b1eb 100755
--- a/src/third_party/gperftools-2.2/src/malloc_hook_mmap_linux.h
+++ b/src/third_party/gperftools-2.2/src/malloc_hook_mmap_linux.h
@@ -56,7 +56,7 @@

 static inline void* do_mmap64(void *start, size_t length,
                               int prot, int flags,
-                              int fd, __off64_t offset) __THROW {
+                              int fd, off64_t offset) __THROW {
   return sys_mmap(start, length, prot, flags, fd, offset);
 }

@@ -67,7 +67,7 @@ static inline void* do_mmap64(void *start, size_t length,

 static inline void* do_mmap64(void *start, size_t length,
                               int prot, int flags,
-                              int fd, __off64_t offset) __THROW {
+                              int fd, off64_t offset) __THROW {
   void *result;

   // Try mmap2() unless it's not supported
@@ -137,9 +137,11 @@ static inline void* do_mmap64(void *start, size_t length,
 # undef mmap

 extern "C" {
+#ifndef mmap64
   void* mmap64(void *start, size_t length, int prot, int flags,
-               int fd, __off64_t offset  ) __THROW
+               int fd, off64_t offset  ) __THROW
     ATTRIBUTE_SECTION(malloc_hook);
+#endif
   void* mmap(void *start, size_t length,int prot, int flags,
              int fd, off_t offset) __THROW
     ATTRIBUTE_SECTION(malloc_hook);
@@ -152,8 +154,9 @@ extern "C" {
     ATTRIBUTE_SECTION(malloc_hook);
 }

+#ifndef mmap64
 extern "C" void* mmap64(void *start, size_t length, int prot, int flags,
-                        int fd, __off64_t offset) __THROW {
+                        int fd, off64_t offset) __THROW {
   MallocHook::InvokePreMmapHook(start, length, prot, flags, fd, offset);
   void *result;
   if (!MallocHook::InvokeMmapReplacement(
@@ -163,6 +166,7 @@ extern "C" void* mmap64(void *start, size_t length, int prot, int flags,
   MallocHook::InvokeMmapHook(result, start, length, prot, flags, fd, offset);
   return result;
 }
+#endif

 # if !defined(__USE_FILE_OFFSET64) || !defined(__REDIRECT_NTH)

@@ -202,7 +206,7 @@ extern "C" void* mremap(void* old_addr, size_t old_size, size_t new_size,
   return result;
 }

-#ifndef __UCLIBC__
+#if defined(__GLIBC__) && !defined(__UCLIBC__)
 // libc's version:
 extern "C" void* __sbrk(ptrdiff_t increment);
